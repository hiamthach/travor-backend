// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: destination_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DestinationService_GetDestinations_FullMethodName = "/pb.DestinationService/GetDestinations"
)

// DestinationServiceClient is the client API for DestinationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestinationServiceClient interface {
	GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error)
}

type destinationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDestinationServiceClient(cc grpc.ClientConnInterface) DestinationServiceClient {
	return &destinationServiceClient{cc}
}

func (c *destinationServiceClient) GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error) {
	out := new(GetDestinationsResponse)
	err := c.cc.Invoke(ctx, DestinationService_GetDestinations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestinationServiceServer is the server API for DestinationService service.
// All implementations must embed UnimplementedDestinationServiceServer
// for forward compatibility
type DestinationServiceServer interface {
	GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error)
	mustEmbedUnimplementedDestinationServiceServer()
}

// UnimplementedDestinationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDestinationServiceServer struct {
}

func (UnimplementedDestinationServiceServer) GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinations not implemented")
}
func (UnimplementedDestinationServiceServer) mustEmbedUnimplementedDestinationServiceServer() {}

// UnsafeDestinationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestinationServiceServer will
// result in compilation errors.
type UnsafeDestinationServiceServer interface {
	mustEmbedUnimplementedDestinationServiceServer()
}

func RegisterDestinationServiceServer(s grpc.ServiceRegistrar, srv DestinationServiceServer) {
	s.RegisterService(&DestinationService_ServiceDesc, srv)
}

func _DestinationService_GetDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestinationServiceServer).GetDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DestinationService_GetDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestinationServiceServer).GetDestinations(ctx, req.(*GetDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DestinationService_ServiceDesc is the grpc.ServiceDesc for DestinationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DestinationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DestinationService",
	HandlerType: (*DestinationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDestinations",
			Handler:    _DestinationService_GetDestinations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "destination_service.proto",
}
