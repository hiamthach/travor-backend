// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: gallery_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GalleryService_AddImage_FullMethodName    = "/pb.GalleryService/AddImage"
	GalleryService_GetImages_FullMethodName   = "/pb.GalleryService/GetImages"
	GalleryService_DeleteImage_FullMethodName = "/pb.GalleryService/DeleteImage"
)

// GalleryServiceClient is the client API for GalleryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GalleryServiceClient interface {
	AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error)
	GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
}

type galleryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGalleryServiceClient(cc grpc.ClientConnInterface) GalleryServiceClient {
	return &galleryServiceClient{cc}
}

func (c *galleryServiceClient) AddImage(ctx context.Context, in *AddImageRequest, opts ...grpc.CallOption) (*AddImageResponse, error) {
	out := new(AddImageResponse)
	err := c.cc.Invoke(ctx, GalleryService_AddImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryServiceClient) GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, GalleryService_GetImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *galleryServiceClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, GalleryService_DeleteImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GalleryServiceServer is the server API for GalleryService service.
// All implementations must embed UnimplementedGalleryServiceServer
// for forward compatibility
type GalleryServiceServer interface {
	AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error)
	GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	mustEmbedUnimplementedGalleryServiceServer()
}

// UnimplementedGalleryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGalleryServiceServer struct {
}

func (UnimplementedGalleryServiceServer) AddImage(context.Context, *AddImageRequest) (*AddImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedGalleryServiceServer) GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImages not implemented")
}
func (UnimplementedGalleryServiceServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedGalleryServiceServer) mustEmbedUnimplementedGalleryServiceServer() {}

// UnsafeGalleryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GalleryServiceServer will
// result in compilation errors.
type UnsafeGalleryServiceServer interface {
	mustEmbedUnimplementedGalleryServiceServer()
}

func RegisterGalleryServiceServer(s grpc.ServiceRegistrar, srv GalleryServiceServer) {
	s.RegisterService(&GalleryService_ServiceDesc, srv)
}

func _GalleryService_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryServiceServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GalleryService_AddImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryServiceServer).AddImage(ctx, req.(*AddImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GalleryService_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryServiceServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GalleryService_GetImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryServiceServer).GetImages(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GalleryService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GalleryServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GalleryService_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GalleryServiceServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GalleryService_ServiceDesc is the grpc.ServiceDesc for GalleryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GalleryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GalleryService",
	HandlerType: (*GalleryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddImage",
			Handler:    _GalleryService_AddImage_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _GalleryService_GetImages_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _GalleryService_DeleteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gallery_service.proto",
}
