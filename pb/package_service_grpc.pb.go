// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: package_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackageService_IsValidPackage_FullMethodName = "/pb.PackageService/IsValidPackage"
	PackageService_GetAll_FullMethodName         = "/pb.PackageService/GetAll"
	PackageService_GetPackages_FullMethodName    = "/pb.PackageService/GetPackages"
	PackageService_GetPackage_FullMethodName     = "/pb.PackageService/GetPackage"
	PackageService_CreatePackage_FullMethodName  = "/pb.PackageService/CreatePackage"
	PackageService_UpdatePackage_FullMethodName  = "/pb.PackageService/UpdatePackage"
	PackageService_DeletePackage_FullMethodName  = "/pb.PackageService/DeletePackage"
)

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageServiceClient interface {
	IsValidPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*IsValidPackageResponse, error)
	GetAll(ctx context.Context, in *GetPkgStatsRequest, opts ...grpc.CallOption) (*GetPkgStatsResponse, error)
	GetPackages(ctx context.Context, in *GetPackagesRequest, opts ...grpc.CallOption) (*GetPackagesResponse, error)
	GetPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error)
	CreatePackage(ctx context.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*Package, error)
	UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*Package, error)
	DeletePackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*DeletePackageResponse, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) IsValidPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*IsValidPackageResponse, error) {
	out := new(IsValidPackageResponse)
	err := c.cc.Invoke(ctx, PackageService_IsValidPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetAll(ctx context.Context, in *GetPkgStatsRequest, opts ...grpc.CallOption) (*GetPkgStatsResponse, error) {
	out := new(GetPkgStatsResponse)
	err := c.cc.Invoke(ctx, PackageService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackages(ctx context.Context, in *GetPackagesRequest, opts ...grpc.CallOption) (*GetPackagesResponse, error) {
	out := new(GetPackagesResponse)
	err := c.cc.Invoke(ctx, PackageService_GetPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_GetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) CreatePackage(ctx context.Context, in *CreatePackageReq, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_CreatePackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageReq, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_UpdatePackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) DeletePackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, PackageService_DeletePackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
// All implementations must embed UnimplementedPackageServiceServer
// for forward compatibility
type PackageServiceServer interface {
	IsValidPackage(context.Context, *PackageID) (*IsValidPackageResponse, error)
	GetAll(context.Context, *GetPkgStatsRequest) (*GetPkgStatsResponse, error)
	GetPackages(context.Context, *GetPackagesRequest) (*GetPackagesResponse, error)
	GetPackage(context.Context, *PackageID) (*Package, error)
	CreatePackage(context.Context, *CreatePackageReq) (*Package, error)
	UpdatePackage(context.Context, *UpdatePackageReq) (*Package, error)
	DeletePackage(context.Context, *PackageID) (*DeletePackageResponse, error)
	mustEmbedUnimplementedPackageServiceServer()
}

// UnimplementedPackageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackageServiceServer struct {
}

func (UnimplementedPackageServiceServer) IsValidPackage(context.Context, *PackageID) (*IsValidPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidPackage not implemented")
}
func (UnimplementedPackageServiceServer) GetAll(context.Context, *GetPkgStatsRequest) (*GetPkgStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPackageServiceServer) GetPackages(context.Context, *GetPackagesRequest) (*GetPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackages not implemented")
}
func (UnimplementedPackageServiceServer) GetPackage(context.Context, *PackageID) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPackageServiceServer) CreatePackage(context.Context, *CreatePackageReq) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPackageServiceServer) UpdatePackage(context.Context, *UpdatePackageReq) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedPackageServiceServer) DeletePackage(context.Context, *PackageID) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedPackageServiceServer) mustEmbedUnimplementedPackageServiceServer() {}

// UnsafePackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageServiceServer will
// result in compilation errors.
type UnsafePackageServiceServer interface {
	mustEmbedUnimplementedPackageServiceServer()
}

func RegisterPackageServiceServer(s grpc.ServiceRegistrar, srv PackageServiceServer) {
	s.RegisterService(&PackageService_ServiceDesc, srv)
}

func _PackageService_IsValidPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).IsValidPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_IsValidPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).IsValidPackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPkgStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetAll(ctx, req.(*GetPkgStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackages(ctx, req.(*GetPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_CreatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackage(ctx, req.(*CreatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_UpdatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UpdatePackage(ctx, req.(*UpdatePackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_DeletePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).DeletePackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageService_ServiceDesc is the grpc.ServiceDesc for PackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsValidPackage",
			Handler:    _PackageService_IsValidPackage_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PackageService_GetAll_Handler,
		},
		{
			MethodName: "GetPackages",
			Handler:    _PackageService_GetPackages_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _PackageService_GetPackage_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _PackageService_CreatePackage_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _PackageService_UpdatePackage_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _PackageService_DeletePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "package_service.proto",
}
